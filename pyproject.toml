[tool.poetry]
name = "sandbox-fastapi"
version = "0.1.0"
description = ""
authors = ["steven kessler <stvnksslr@gmail.com>"]

[tool.poetry.dependencies]
python = "^3.11"
fastapi = "^0.87.0"
asyncpg = "^0.27.0"
loguru = "^0.6.0"
uvicorn = {extras = ["standard"], version = "^0.20.0"}
httpx = "^0.22.0"
tortoise-orm = {extras = ["accel"], version = "^0.19.2"}
aerich = "^0.7.1"
fastapi-admin = "^1.0.3"


[tool.poetry.group.dev.dependencies]
black = "^23.3.0"
ruff = "^0.0.272"
pytest = "^7.1.0"
pytest-cov = "^3.0.0"
pytest-sugar = "^0.9.4"
pytest-asyncio = "^0.18.2"
python-dotenv = "^0.19.2"

[tool.aerich]
tortoise_orm = "src.utils.db_manager.MIGRATION_CONFIG"
location = "./migrations"
src_folder = "./."

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 120
target-version = ['py38']
include = '\.pyi?$'
exclude = '''
(
  /(
      \.eggs         # exclude a few common directories in the
    | \.git          # root of the project
    | \.hg
    | \.mypy_cache
    | \.tox
    | \.venv
    | _build
    | buck-out
    | build
    | dist
  )
)
'''

[tool.ruff]
line-length = 120
ignore = [
    "B008",    # function-call-in-default-argument (B008)
    "S101",    # Use of `assert` detected
    "RET504",  # Unnecessary variable assignment before `return` statement
    "PLR2004", # Magic value used in comparison, consider replacing {value} with a constant variable
    "ARG001",  # Unused function argument: `{name}`
    "S311",    # Standard pseudo-random generators are not suitable for cryptographic purposes
    "E501",    # Checks for lines that exceed the specified maximum character length.
    "BLE001",  # Do not catch blind exception: `{name}`
    "PLW2901"  # redefined-loop-name
]
select = [
    "A",    # flake8-builtins
    "B",    # flake8-bugbear
    "E",    # pycodestyle
    "F",    # Pyflakes
    "N",    # pep8-naming
    "RET",  # flake8-return
    "S",    # flake8-bandit
    "W",    # pycodestyle
    "Q",    # flake8-quotes
    "C90",  # mccabe
    "I",    # isort
    "UP",   # pyupgrade
    "BLE",  # flake8-blind-except
    "C4",   # flake8-comprehensions
    "ISC",  # flake8-implicit-str-concat
    "ICN",  # flake8-import-conventions
    "PT",   # flake8-pytest-style
    "PIE",  # flake8-pie
    "T20",  # flake8-print
    "SIM",  # flake8-simplify
    "TCH",  # flake8-type-checking
    "ARG",  # flake8-unused-arguments
    "PTH",  # flake8-use-pathlib
    "ERA",  # eradicate
    "PL",   # Pylint
    "NPY",  # NumPy-specific rules
    "PLE",  # Pylint
    "PLR",  # Pylint
    "PLW",  # Pylint
    "RUF",  # Ruff-specific rules
    "PD"    # pandas-vet
]
exclude = [
    ".eggs",
    ".git",
    ".pytype",
    ".ruff_cache",
    ".venv",
    "__pypackages__",
    ".venv",
]